/* Generated By:JavaCC: Do not edit this line. PawnParser.java */
package org.alliedmodders.pawn.jccparser;

import java.io.*;
import java.util.*;

public class PawnParser implements PawnParserConstants {

    private static final String PARSER_VERSION_STR = "0.0.1";

    public static void main(String[] args) {
        System.out.printf("Pawn Parser %s%n", PARSER_VERSION_STR);
        PawnParser parser;
        switch (args.length) {
            case 0:
                System.out.println("Reading from standard input . . .");
                parser = new PawnParser(System.in);
                break;
            case 1:
                System.out.printf("Reading from file '%s' . . .%n", args[0]);
                try {
                    parser = new PawnParser(new FileInputStream(args[0]));
                } catch (FileNotFoundException e) {
                    System.out.printf("File '%s' not found%n", args[0]);
                    return;
                }

                break;
            default:
                System.out.println("Usage:");
                System.out.println("\u005ctjava PawnParser < inputFile");
                System.out.println("\u005ctjava PawnParser inputFile");
                System.out.println("Exiting parser . . .");
                return;
        }

        try {
            parser.CompilationUnit();
            System.out.println("Pawn program parsed successfully.");
        } catch (ParseException e) {
            System.out.println("Encoutered errors during parse.");
            e.printStackTrace();
        }
    }

    public List<ParseException> syntaxErrors = new ArrayList<>();
    
    void recover(ParseException ex) {
        syntaxErrors.add(ex);
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != EOF && t.kind != SEMICOLON && t.kind != NEWLINE);
    }
    
    /**
     * ***************************************
     * THE PAWN LANGUAGE GRAMMAR STARTS HERE *
     ****************************************
     */
    final public void CompilationUnit() throws ParseException {
        try {
        label_1:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case FORWARD:
                case NATIVE:
                case PUBLIC:
                case STATIC:
                case STOCK:
                case TAG:
                case IDENTIFIER:
        ;
                    break;
                default:
                    jj_la1[0] = jj_gen;
                    break label_1;
            }
            Declaration();
        }
        jj_consume_token(0);
        } catch (ParseException e) { 
            recover(e);
        }
    }

    final public void EndOfStatement() throws ParseException {
        jj_consume_token(SEMICOLON);
    }

    final public void Declaration() throws ParseException {
        try {
        if (jj_2_1(2147483647)) {
            PrototypeDeclaration();
        } else {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case PUBLIC:
                case STATIC:
                case STOCK:
                case TAG:
                case IDENTIFIER:
                    FunctionOrPrototypeDeclaration();
                    break;
                default:
                    jj_la1[1] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        } catch (ParseException e) { 
            recover(e);
        }
    }

    final public void PrototypeDeclaration() throws ParseException {
        PrototypeClassSpecifier();
        Identifier();
        FormalParameters();
        EndOfStatement();
    }

    final public void PrototypeClassSpecifier() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case NATIVE:
                jj_consume_token(NATIVE);
                break;
            case FORWARD:
                jj_consume_token(FORWARD);
                break;
            default:
                jj_la1[2] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void FunctionOrPrototypeDeclaration() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case PUBLIC:
            case STATIC:
            case STOCK:
                FunctionClassSpecifier();
                break;
            default:
                jj_la1[3] = jj_gen;
                ;
        }
        Identifier();
        FormalParameters();
        jj_consume_token(LBRACE);
        FunctionBody();
    }

    final public void FunctionClassSpecifier() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case PUBLIC:
                jj_consume_token(PUBLIC);
                break;
            case STATIC:
                jj_consume_token(STATIC);
                break;
            case STOCK:
                jj_consume_token(STOCK);
                break;
            default:
                jj_la1[4] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void FunctionBody() throws ParseException {
        jj_consume_token(RBRACE);
    }

    final public void Identifier() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case TAG:
                Tag();
                break;
            default:
                jj_la1[5] = jj_gen;
                ;
        }
        jj_consume_token(IDENTIFIER);
    }

    final public void Tag() throws ParseException {
        jj_consume_token(TAG);
    }

    final public void FormalParameters() throws ParseException {
        jj_consume_token(LPAREN);
        if (jj_2_3(2147483647)) {
            FormalParameterEllipsis();
        } else {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case CONST:
                case TAG:
                case IDENTIFIER:
                case BIT_AND:
                    FormalParameter();
                    label_2:
                    while (true) {
                        if (jj_2_2(2147483647)) {
                            ;
                        } else {
                            break label_2;
                        }
                        jj_consume_token(COMMA);
                        FormalParameter();
                    }
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case COMMA:
                            jj_consume_token(COMMA);
                            FormalParameterEllipsis();
                            break;
                        default:
                            jj_la1[6] = jj_gen;
                            ;
                    }
                    break;
                default:
                    jj_la1[7] = jj_gen;
                    ;
            }
        }
        jj_consume_token(RPAREN);
    }

    final public void FormalParameterEllipsis() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case TAG:
                Tag();
                break;
            default:
                jj_la1[8] = jj_gen;
                ;
        }
        jj_consume_token(ELLIPSIS);
    }

    final public void FormalParameter() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case CONST:
                StorageSpecifier();
                break;
            default:
                jj_la1[9] = jj_gen;
                ;
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case BIT_AND:
                ByRefVariableDeclarator();
                break;
            case TAG:
            case IDENTIFIER:
                VariableDeclarator();
                break;
            default:
                jj_la1[10] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void StorageSpecifier() throws ParseException {
        jj_consume_token(CONST);
    }

    final public void ByRefVariableDeclarator() throws ParseException {
        ByRef();
        Identifier();
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case ASSIGN:
                jj_consume_token(ASSIGN);
                NumericLiteral();
                break;
            default:
                jj_la1[11] = jj_gen;
                ;
        }
    }

    final public void ByRef() throws ParseException {
        jj_consume_token(BIT_AND);
    }

    final public void NumericLiteral() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case POSITIVE_INTEGER_LITERAL:
            case NEGATIVE_INTEGER_LITERAL:
                IntegerLiteral();
                break;
            case RATIONAL_LITERAL:
                RationalLiteral();
                break;
            case FALSE:
            case TRUE:
                BooleanLiteral();
                break;
            default:
                jj_la1[12] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void IntegerLiteral() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case POSITIVE_INTEGER_LITERAL:
                jj_consume_token(POSITIVE_INTEGER_LITERAL);
                break;
            case NEGATIVE_INTEGER_LITERAL:
                jj_consume_token(NEGATIVE_INTEGER_LITERAL);
                break;
            default:
                jj_la1[13] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void RationalLiteral() throws ParseException {
        jj_consume_token(RATIONAL_LITERAL);
    }

    final public void BooleanLiteral() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case TRUE:
                jj_consume_token(TRUE);
                break;
            case FALSE:
                jj_consume_token(FALSE);
                break;
            default:
                jj_la1[14] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void VariableDeclarator() throws ParseException {
        VariableDeclaratorIdentifier();
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case ASSIGN:
                jj_consume_token(ASSIGN);
                Initializer();
                break;
            default:
                jj_la1[15] = jj_gen;
                ;
        }
    }

    final public void VariableDeclaratorIdentifier() throws ParseException {
        Identifier();
        label_3:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case LBRACKET:
        ;
                    break;
                default:
                    jj_la1[16] = jj_gen;
                    break label_3;
            }
            jj_consume_token(LBRACKET);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case POSITIVE_INTEGER_LITERAL:
                case TAG:
                case IDENTIFIER:
                    ArrayDeclarationAllocator();
                    break;
                default:
                    jj_la1[17] = jj_gen;
                    ;
            }
            jj_consume_token(RBRACKET);
        }
    }

    final public void ArrayDeclarationAllocator() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case POSITIVE_INTEGER_LITERAL:
                jj_consume_token(POSITIVE_INTEGER_LITERAL);
                break;
            case TAG:
            case IDENTIFIER:
                Identifier();
                break;
            default:
                jj_la1[18] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void Initializer() throws ParseException {
        if (jj_2_4(2147483647)) {
            jj_consume_token(LBRACE);
            jj_consume_token(RBRACE);
        } else {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case LBRACE:
                    jj_consume_token(LBRACE);
                    InitializerList();
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case COMMA:
                            jj_consume_token(COMMA);
                            break;
                        default:
                            jj_la1[19] = jj_gen;
                            ;
                    }
                    jj_consume_token(RBRACE);
                    break;
                case POSITIVE_INTEGER_LITERAL:
                case NEGATIVE_INTEGER_LITERAL:
                case RATIONAL_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case FALSE:
                case TRUE:
                    Literal();
                    break;
                default:
                    jj_la1[20] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    final public void InitializerList() throws ParseException {
        Initializer();
        label_4:
        while (true) {
            if (jj_2_5(2147483647)) {
                ;
            } else {
                break label_4;
            }
            jj_consume_token(COMMA);
            Initializer();
        }
    }

    final public void Literal() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case POSITIVE_INTEGER_LITERAL:
            case NEGATIVE_INTEGER_LITERAL:
            case RATIONAL_LITERAL:
            case FALSE:
            case TRUE:
                NumericLiteral();
                break;
            case CHARACTER_LITERAL:
                CharacterLiteral();
                break;
            case STRING_LITERAL:
                StringLiteral();
                break;
            default:
                jj_la1[21] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void CharacterLiteral() throws ParseException {
        jj_consume_token(CHARACTER_LITERAL);
    }

    final public void StringLiteral() throws ParseException {
        jj_consume_token(STRING_LITERAL);
    }

    private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_1();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_2();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }

    private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_3();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(2, xla);
        }
    }

    private boolean jj_2_4(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_4();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(3, xla);
        }
    }

    private boolean jj_2_5(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_5();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(4, xla);
        }
    }

    private boolean jj_3_5() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(71)) {
            jj_scanpos = xsp;
            if (jj_3R_6()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_26() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(11)) {
            jj_scanpos = xsp;
            if (jj_scan_token(21)) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_16() {
        if (jj_scan_token(ASSIGN)) {
            return true;
        }
        if (jj_3R_19()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_22() {
        if (jj_3R_28()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_13() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(62)) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_21() {
        if (jj_3R_27()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_20() {
        if (jj_3R_26()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_17() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_20()) {
            jj_scanpos = xsp;
            if (jj_scan_token(22)) {
                jj_scanpos = xsp;
                if (jj_3R_21()) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3R_9() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_12()) {
            jj_scanpos = xsp;
            if (jj_scan_token(25)) {
                jj_scanpos = xsp;
                if (jj_scan_token(30)) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3R_12() {
        if (jj_3R_17()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_31() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (jj_3R_19()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_4() {
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        if (jj_scan_token(RBRACE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_29() {
        if (jj_3R_19()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_31()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_18() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_22()) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_10() {
        if (jj_scan_token(88)) {
            return true;
        }
        if (jj_3R_13()) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_14()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_25() {
        if (jj_3R_9()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_24() {
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        if (jj_3R_29()) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(76)) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(RBRACE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_2() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (jj_3R_5()) {
            return true;
        }
        if (jj_scan_token(COMMA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_8() {
        if (jj_3R_11()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_23() {
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        if (jj_scan_token(RBRACE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_19() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_23()) {
            jj_scanpos = xsp;
            if (jj_3R_24()) {
                jj_scanpos = xsp;
                if (jj_3R_25()) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3R_7() {
        if (jj_3R_10()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_1() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(48)) {
            jj_scanpos = xsp;
            if (jj_scan_token(45)) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_30() {
        if (jj_3R_13()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_28() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(11)) {
            jj_scanpos = xsp;
            if (jj_3R_30()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_5() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(35)) {
            jj_scanpos = xsp;
        }
        xsp = jj_scanpos;
        if (jj_3R_7()) {
            jj_scanpos = xsp;
            if (jj_3R_8()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3_3() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(62)) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(ELLIPSIS)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_6() {
        if (jj_3R_9()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_15() {
        if (jj_3R_13()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_18()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_11() {
        if (jj_3R_15()) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_16()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_27() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(60)) {
            jj_scanpos = xsp;
            if (jj_scan_token(43)) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_14() {
        if (jj_scan_token(ASSIGN)) {
            return true;
        }
        if (jj_3R_17()) {
            return true;
        }
        return false;
    }

    /**
     * Generated Token Manager.
     */
    public PawnParserTokenManager token_source;
    SimpleCharStream jj_input_stream;
    /**
     * Current token.
     */
    public Token token;
    /**
     * Next token.
     */
    public Token jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    private int jj_gen;
    final private int[] jj_la1 = new int[22];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;
    static private int[] jj_la1_3;

    static {
        jj_la1_init_0();
        jj_la1_init_1();
        jj_la1_init_2();
        jj_la1_init_3();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x600800, 0x200800, 0x0, 0x0, 0x0, 0x800, 0x800, 0x0, 0x42600800, 0x42600800,};
    }

    private static void jj_la1_init_1() {
        jj_la1_1 = new int[]{0x43092000, 0x43080000, 0x12000, 0x3080000, 0x3080000, 0x40000000, 0x0, 0x40000008, 0x40000000, 0x8, 0x40000000, 0x0, 0x10000800, 0x0, 0x10000800, 0x0, 0x0, 0x40000000, 0x40000000, 0x0, 0x10000800, 0x10000800,};
    }

    private static void jj_la1_init_2() {
        jj_la1_2 = new int[]{0x2, 0x2, 0x0, 0x0, 0x0, 0x0, 0x1000, 0x1000002, 0x0, 0x0, 0x1000002, 0x8000000, 0x0, 0x0, 0x0, 0x8000000, 0x200, 0x2, 0x2, 0x1000, 0x80, 0x0,};
    }

    private static void jj_la1_init_3() {
        jj_la1_3 = new int[]{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,};
    }
    final private JJCalls[] jj_2_rtns = new JJCalls[5];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    /**
     * Constructor with InputStream.
     */
    public PawnParser(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public PawnParser(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new PawnParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 22; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 22; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /**
     * Constructor.
     */
    public PawnParser(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new PawnParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 22; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 22; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /**
     * Constructor with generated Token Manager.
     */
    public PawnParser(PawnParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 22; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(PawnParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 22; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) {
                            c.first = null;
                        }
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    static private final class LookaheadSuccess extends java.lang.Error {
    }
    final private LookaheadSuccess jj_ls = new LookaheadSuccess();

    private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) {
                jj_add_error_token(kind, i);
            }
        }
        if (jj_scanpos.kind != kind) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            throw jj_ls;
        }
        return false;
    }

    /**
     * Get the next Token.
     */
    final public Token getNextToken() {
        if (token.next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /**
     * Get the specific Token.
     */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) {
                t = t.next;
            } else {
                t = t.next = token_source.getNextToken();
            }
        }
        return t;
    }

    private int jj_ntk() {
        if ((jj_nt = token.next) == null) {
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        } else {
            return (jj_ntk = jj_nt.kind);
        }
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) {
            return;
        }
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            jj_entries_loop:
            for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
                int[] oldentry = (int[]) (it.next());
                if (oldentry.length == jj_expentry.length) {
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            continue jj_entries_loop;
                        }
                    }
                    jj_expentries.add(jj_expentry);
                    break jj_entries_loop;
                }
            }
            if (pos != 0) {
                jj_lasttokens[(jj_endpos = pos) - 1] = kind;
            }
        }
    }

    /**
     * Generate ParseException.
     */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[117];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 22; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                    if ((jj_la1_2[i] & (1 << j)) != 0) {
                        la1tokens[64 + j] = true;
                    }
                    if ((jj_la1_3[i] & (1 << j)) != 0) {
                        la1tokens[96 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 117; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /**
     * Enable tracing.
     */
    final public void enable_tracing() {
    }

    /**
     * Disable tracing.
     */
    final public void disable_tracing() {
    }

    private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 5; i++) {
            try {
                JJCalls p = jj_2_rtns[i];
                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                            case 0:
                                jj_3_1();
                                break;
                            case 1:
                                jj_3_2();
                                break;
                            case 2:
                                jj_3_3();
                                break;
                            case 3:
                                jj_3_4();
                                break;
                            case 4:
                                jj_3_5();
                                break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls {

        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
