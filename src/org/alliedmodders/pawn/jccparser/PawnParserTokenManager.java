/* Generated By:JavaCC: Do not edit this line. PawnParserTokenManager.java */
package org.alliedmodders.pawn.jccparser;
import java.io.*;
import java.util.*;

/** Token Manager. */
public class PawnParserTokenManager implements PawnParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x10L) != 0L || (active1 & 0x80020000L) != 0L)
            return 4;
         if ((active1 & 0x20108000L) != 0L)
            return 19;
         if ((active1 & 0x10000000000000L) != 0L)
            return 42;
         if ((active0 & 0x3ffffffc00000000L) != 0L)
         {
            jjmatchedKind = 65;
            return 87;
         }
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 65;
            return 61;
         }
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 65;
            return 64;
         }
         if ((active0 & 0x80000000L) != 0L)
            return 88;
         return -1;
      case 1:
         if ((active0 & 0x808000000000L) != 0L)
            return 87;
         if ((active0 & 0x3fff7f7f00000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 65;
               jjmatchedPos = 1;
            }
            return 87;
         }
         return -1;
      case 2:
         if ((active0 & 0x2300000000000L) != 0L)
            return 87;
         if ((active0 & 0x3ffd4f7f00000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 65;
               jjmatchedPos = 2;
            }
            return 87;
         }
         return -1;
      case 3:
         if ((active0 & 0x1000470400000000L) != 0L)
            return 87;
         if ((active0 & 0x2ffd287b00000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 3;
            return 87;
         }
         return -1;
      case 4:
         if ((active0 & 0x2ac0080a00000000L) != 0L)
            return 87;
         if ((active0 & 0x53d207100000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 4;
            return 87;
         }
         return -1;
      case 5:
         if ((active0 & 0x539000100000000L) != 0L)
            return 87;
         if ((active0 & 0x4207000000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 5;
            return 87;
         }
         return -1;
      case 6:
         if ((active0 & 0x206000000000L) != 0L)
            return 87;
         if ((active0 & 0x4001000000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 6;
            return 87;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 109;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000L);
      case 37:
         jjmatchedKind = 82;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000L);
      case 38:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800100000000L);
      case 40:
         return jjStopAtPos(0, 69);
      case 41:
         return jjStopAtPos(0, 70);
      case 42:
         jjmatchedKind = 80;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000L);
      case 43:
         jjmatchedKind = 78;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10080000L);
      case 44:
         return jjStopAtPos(0, 76);
      case 45:
         jjmatchedKind = 79;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20100000L);
      case 46:
         jjmatchedKind = 77;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000L);
      case 47:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_0(0x10L, 0x80000000L);
      case 58:
         return jjStopAtPos(0, 114);
      case 59:
         return jjStopAtPos(0, 75);
      case 60:
         jjmatchedKind = 105;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x41000800000L);
      case 61:
         jjmatchedKind = 91;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000L);
      case 62:
         jjmatchedKind = 107;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x106000600000L);
      case 63:
         return jjStopAtPos(0, 113);
      case 91:
         return jjStopAtPos(0, 73);
      case 92:
         return jjStartNfaWithStates_0(0, 116, 42);
      case 93:
         return jjStopAtPos(0, 74);
      case 94:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000L);
      case 95:
         return jjStartNfaWithStates_0(0, 31, 88);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1c00000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0xe000000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x70000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x380000000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x3000000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x7e0000000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1800000000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 71);
      case 124:
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400200000000L);
      case 125:
         return jjStopAtPos(0, 72);
      case 126:
         return jjStopAtPos(0, 112);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 111);
         break;
      case 42:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 43:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         break;
      case 45:
         if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000000L);
      case 60:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000L);
      case 61:
         if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 93);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 94);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 98);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 99);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 103);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 104);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 106);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 108);
         break;
      case 62:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x6000400000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x801080400000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x12006000000000L, active1, 0L);
      case 102:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 47, 87);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x40010000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L);
      case 111:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 39, 87);
         return jjMoveStringLiteralDfa2_0(active0, 0x701800000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000200000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x380000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0L);
      case 124:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 110);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStopAtPos(2, 115);
         break;
      case 61:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(2, 100);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(2, 101);
         break;
      case 62:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x180000000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x44000200000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2400040000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x1800000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x10500000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x11400000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000020000000000L, active1, 0L);
      case 119:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 49, 87);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(3, 102);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2200000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 87);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 87);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 60, 87);
         return jjMoveStringLiteralDfa4_0(active0, 0x60000100000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1004000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x2008000000000000L, active1, 0L);
      case 109:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 87);
         break;
      case 111:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 87);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x80800000000L, active1, 0L);
      case 116:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 87);
         return jjMoveStringLiteralDfa4_0(active0, 0x580001000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x4200000000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L);
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 87);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 87);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 61, 87);
         break;
      case 102:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 59, 87);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x108001000000000L);
      case 107:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 87);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 87);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L);
      case 112:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 54, 87);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000100000000L);
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 87);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 87);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 87);
         break;
      case 101:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 87);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L);
      case 102:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 87);
         break;
      case 104:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 58, 87);
         break;
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L);
      case 110:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 87);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L);
      case 116:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 87);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 38, 87);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 45, 87);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000L);
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 87);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 36, 87);
         break;
      case 114:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 50, 87);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 87;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 88:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(79);
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(78, 59);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(26, 27);
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 39)
                     jjAddStates(3, 4);
                  else if (curChar == 45)
                     jjCheckNAddStates(5, 7);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 4;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddStates(8, 12);
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if (curChar == 48)
                     jjAddStates(13, 14);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(76);
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(75, 59);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(76);
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(75, 59);
                  break;
               case 19:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                     jjCheckNAddTwoStates(13, 14);
                  }
                  else if (curChar == 48)
                     jjCheckNAddStates(15, 17);
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(76);
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(75, 59);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  else if ((0xa400000000L & l) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 1:
                  if ((0x2400L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 2:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar != 47)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(18, 20);
                  break;
               case 5:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(18, 20);
                  break;
               case 6:
                  if ((0x2400L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 7:
                  if (curChar == 10 && kind > 3)
                     kind = 3;
                  break;
               case 8:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 10:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAdd(11);
                  break;
               case 12:
                  if (curChar == 45)
                     jjCheckNAddStates(5, 7);
                  break;
               case 13:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddTwoStates(13, 14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(14);
                  break;
               case 16:
                  if (curChar == 48)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar != 49)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(18);
                  break;
               case 20:
                  if (curChar == 48)
                     jjCheckNAddStates(15, 17);
                  break;
               case 21:
                  if (curChar == 48)
                     jjCheckNAddTwoStates(21, 13);
                  break;
               case 23:
                  if (curChar == 48)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 24:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddTwoStates(24, 25);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(25);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(26, 27);
                  break;
               case 27:
                  if (curChar == 46)
                     jjCheckNAdd(28);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddTwoStates(28, 29);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 31:
                  if (curChar == 39)
                     jjAddStates(3, 4);
                  break;
               case 32:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 33:
                  if (curChar == 39 && kind > 25)
                     kind = 25;
                  break;
               case 35:
                  if ((0xa400000000L & l) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(21, 23);
                  break;
               case 37:
                  if (curChar == 59)
                     jjCheckNAdd(33);
                  break;
               case 38:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 44:
                  if (curChar == 59 && kind > 26)
                     kind = 26;
                  break;
               case 45:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(47, 44);
                  break;
               case 48:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 49:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 51:
                  if ((0xa400000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 52:
                  if (curChar == 34 && kind > 30)
                     kind = 30;
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(27, 31);
                  break;
               case 54:
                  if (curChar == 59)
                     jjCheckNAddStates(0, 2);
                  break;
               case 55:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(32, 36);
                  break;
               case 59:
                  if (curChar == 58 && kind > 62)
                     kind = 62;
                  break;
               case 67:
                  if (curChar == 48)
                     jjAddStates(13, 14);
                  break;
               case 69:
                  if (curChar != 48)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(69);
                  break;
               case 71:
                  if (curChar == 48)
                     jjCheckNAddTwoStates(71, 72);
                  break;
               case 72:
                  if (curChar != 49)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddTwoStates(72, 73);
                  break;
               case 73:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAdd(73);
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(75, 59);
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(76);
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(78, 59);
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(79);
                  break;
               case 80:
                  if (curChar != 48)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddStates(8, 12);
                  break;
               case 82:
                  if (curChar == 48)
                     jjCheckNAddTwoStates(82, 10);
                  break;
               case 84:
                  if (curChar == 48)
                     jjCheckNAddTwoStates(84, 85);
                  break;
               case 85:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddTwoStates(85, 86);
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAdd(86);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 88:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(79);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(78, 59);
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAddStates(37, 39);
                  }
                  else if ((0x80000001L & l) != 0L)
                     jjCheckNAddTwoStates(78, 79);
                  else if (curChar == 92)
                     jjAddStates(40, 42);
                  if (curChar == 95)
                     jjCheckNAdd(59);
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 64;
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 64:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(76);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(75, 59);
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 61:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(76);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(75, 59);
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 87:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(76);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(75, 59);
                  break;
               case 42:
                  if ((0x54406610000000L & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               case 5:
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(18, 20);
                  break;
               case 15:
                  if (curChar == 98)
                     jjAddStates(43, 44);
                  break;
               case 22:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 24:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddTwoStates(24, 25);
                  break;
               case 25:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(25);
                  break;
               case 29:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 34:
                  if (curChar == 92)
                     jjAddStates(45, 47);
                  break;
               case 35:
                  if ((0x54406610000000L & l) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 39:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(40);
                  break;
               case 40:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 41:
                  if (curChar == 92)
                     jjAddStates(40, 42);
                  break;
               case 46:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(47, 44);
                  break;
               case 49:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 50:
                  if (curChar == 92)
                     jjAddStates(48, 50);
                  break;
               case 51:
                  if ((0x54406610000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 56:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(57);
                  break;
               case 57:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(32, 36);
                  break;
               case 58:
                  if (curChar == 108)
                     jjCheckNAdd(59);
                  break;
               case 60:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 62:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 121)
                     jjCheckNAdd(59);
                  break;
               case 65:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 95)
                     jjCheckNAdd(59);
                  break;
               case 68:
                  if (curChar == 98)
                     jjCheckNAdd(69);
                  break;
               case 70:
                  if (curChar == 98)
                     jjAddStates(51, 52);
                  break;
               case 74:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAddStates(37, 39);
                  break;
               case 75:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(75, 59);
                  break;
               case 76:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(76);
                  break;
               case 77:
                  if ((0x80000001L & l) != 0L)
                     jjCheckNAddTwoStates(78, 79);
                  break;
               case 78:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(78, 59);
                  break;
               case 79:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(79);
                  break;
               case 81:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(69);
                  break;
               case 83:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddTwoStates(84, 85);
                  break;
               case 85:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddTwoStates(85, 86);
                  break;
               case 86:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAdd(86);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(18, 20);
                  break;
               case 32:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 49:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 87 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(1, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 47)
                     kind = 6;
                  break;
               case 1:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   49, 50, 52, 32, 34, 13, 19, 20, 81, 69, 82, 10, 83, 68, 70, 21, 
   13, 22, 5, 6, 8, 36, 37, 33, 40, 37, 33, 49, 50, 53, 54, 52, 
   49, 50, 57, 54, 52, 75, 59, 76, 42, 43, 45, 16, 17, 35, 36, 38, 
   51, 53, 55, 71, 72, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, "\137", "\141\163\163\145\162\164", "\142\162\145\141\153", 
"\143\141\163\145", "\143\157\156\163\164", "\143\157\156\164\151\156\165\145", 
"\144\145\146\141\165\154\164", "\144\145\146\151\156\145\144", "\144\157", "\145\154\163\145", 
"\145\156\165\155", "\145\170\151\164", "\146\141\154\163\145", "\146\157\162", 
"\146\157\162\167\141\162\144", "\147\157\164\157", "\151\146", "\156\141\164\151\166\145", "\156\145\167", 
"\157\160\145\162\141\164\157\162", "\160\165\142\154\151\143", "\162\145\164\165\162\156", 
"\163\151\172\145\157\146", "\163\154\145\145\160", "\163\164\141\164\145", "\163\164\141\164\151\143", 
"\163\164\157\143\153", "\163\167\151\164\143\150", "\164\141\147\157\146", "\164\162\165\145", 
"\167\150\151\154\145", null, null, null, null, null, null, null, "\50", "\51", "\173", "\175", 
"\133", "\135", "\73", "\54", "\56", "\53", "\55", "\52", "\57", "\45", "\53\53", 
"\55\55", "\76\76", "\76\76\76", "\74\74", "\46", "\174", "\136", "\75", "\53\75", 
"\55\75", "\52\75", "\57\75", "\46\75", "\174\75", "\136\75", "\45\75", "\74\74\75", 
"\76\76\75", "\76\76\76\75", "\75\75", "\41\75", "\74", "\74\75", "\76", "\76\75", "\41", 
"\174\174", "\46\46", "\176", "\77", "\72", "\56\56\56", "\134", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, 1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x7fffffffc6600881L, 0x1fffffffffffe2L, 
};
static final long[] jjtoSkip = {
   0x4eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x4cL, 0x0L, 
};
static final long[] jjtoMore = {
   0x30L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[87];
private final int[] jjstateSet = new int[174];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public PawnParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public PawnParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 87; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         curTokenImage = "";
      else
         curTokenImage = image.toString();
      beginLine = endLine = input_stream.getBeginLine();
      beginColumn = endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
   }
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 6;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos < 0 || (jjmatchedPos == 0 && jjmatchedKind > 5))
         {
            jjmatchedKind = 5;
            jjmatchedPos = 0;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
