/* Generated By:JavaCC: Do not edit this line. PawnParserConstants.java */
package org.alliedmodders.pawn.jccparser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface PawnParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITESPACE = 1;
  /** RegularExpression Id. */
  int NEWLINE = 2;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 3;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int ZERO_INTEGER_LITERAL = 7;
  /** RegularExpression Id. */
  int ZERO = 8;
  /** RegularExpression Id. */
  int BINARY_PREFIX = 9;
  /** RegularExpression Id. */
  int HEXADECIMAL_PREFIX = 10;
  /** RegularExpression Id. */
  int POSITIVE_INTEGER_LITERAL = 11;
  /** RegularExpression Id. */
  int POSITIVE_DECIMAL_LITERAL = 12;
  /** RegularExpression Id. */
  int NONZERO_DECIMAL_DIGIT = 13;
  /** RegularExpression Id. */
  int DECIMAL_DIGIT = 14;
  /** RegularExpression Id. */
  int POSITIVE_BINARY_LITERAL = 15;
  /** RegularExpression Id. */
  int NONZERO_BINARY_DIGIT = 16;
  /** RegularExpression Id. */
  int BINARY_DIGIT = 17;
  /** RegularExpression Id. */
  int POSITIVE_HEXADECIMAL_LITERAL = 18;
  /** RegularExpression Id. */
  int NONZERO_HEXADECIMAL_DIGIT = 19;
  /** RegularExpression Id. */
  int HEXADECIMAL_DIGIT = 20;
  /** RegularExpression Id. */
  int NEGATIVE_INTEGER_LITERAL = 21;
  /** RegularExpression Id. */
  int RATIONAL_LITERAL = 22;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 23;
  /** RegularExpression Id. */
  int EXPONENT_PART = 24;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 25;
  /** RegularExpression Id. */
  int ESCAPED_SEQUENCE = 26;
  /** RegularExpression Id. */
  int ESCAPE_SEQUENCE = 27;
  /** RegularExpression Id. */
  int DEFINED_ESCAPE = 28;
  /** RegularExpression Id. */
  int HEXADECIMAL_LITERAL = 29;
  /** RegularExpression Id. */
  int STRING_LITERAL = 30;
  /** RegularExpression Id. */
  int UNDERSCORE = 31;
  /** RegularExpression Id. */
  int ASSERT = 32;
  /** RegularExpression Id. */
  int BREAK = 33;
  /** RegularExpression Id. */
  int CASE = 34;
  /** RegularExpression Id. */
  int CONST = 35;
  /** RegularExpression Id. */
  int CONTINUE = 36;
  /** RegularExpression Id. */
  int _DEFAULT = 37;
  /** RegularExpression Id. */
  int DEFINED = 38;
  /** RegularExpression Id. */
  int DO = 39;
  /** RegularExpression Id. */
  int ELSE = 40;
  /** RegularExpression Id. */
  int ENUM = 41;
  /** RegularExpression Id. */
  int EXIT = 42;
  /** RegularExpression Id. */
  int FALSE = 43;
  /** RegularExpression Id. */
  int FOR = 44;
  /** RegularExpression Id. */
  int FORWARD = 45;
  /** RegularExpression Id. */
  int GOTO = 46;
  /** RegularExpression Id. */
  int IF = 47;
  /** RegularExpression Id. */
  int NATIVE = 48;
  /** RegularExpression Id. */
  int NEW = 49;
  /** RegularExpression Id. */
  int OPERATOR = 50;
  /** RegularExpression Id. */
  int PUBLIC = 51;
  /** RegularExpression Id. */
  int RETURN = 52;
  /** RegularExpression Id. */
  int SIZEOF = 53;
  /** RegularExpression Id. */
  int SLEEP = 54;
  /** RegularExpression Id. */
  int STATE = 55;
  /** RegularExpression Id. */
  int STATIC = 56;
  /** RegularExpression Id. */
  int STOCK = 57;
  /** RegularExpression Id. */
  int SWITCH = 58;
  /** RegularExpression Id. */
  int TAGOF = 59;
  /** RegularExpression Id. */
  int TRUE = 60;
  /** RegularExpression Id. */
  int WHILE = 61;
  /** RegularExpression Id. */
  int TAG = 62;
  /** RegularExpression Id. */
  int ANY_TAG = 63;
  /** RegularExpression Id. */
  int BOOL_TAG = 64;
  /** RegularExpression Id. */
  int IDENTIFIER = 65;
  /** RegularExpression Id. */
  int SYMBOL = 66;
  /** RegularExpression Id. */
  int LETTER = 67;
  /** RegularExpression Id. */
  int DIGIT = 68;
  /** RegularExpression Id. */
  int LPAREN = 69;
  /** RegularExpression Id. */
  int RPAREN = 70;
  /** RegularExpression Id. */
  int LBRACE = 71;
  /** RegularExpression Id. */
  int RBRACE = 72;
  /** RegularExpression Id. */
  int LBRACKET = 73;
  /** RegularExpression Id. */
  int RBRACKET = 74;
  /** RegularExpression Id. */
  int SEMICOLON = 75;
  /** RegularExpression Id. */
  int COMMA = 76;
  /** RegularExpression Id. */
  int DOT = 77;
  /** RegularExpression Id. */
  int PLUS = 78;
  /** RegularExpression Id. */
  int MINUS = 79;
  /** RegularExpression Id. */
  int STAR = 80;
  /** RegularExpression Id. */
  int SLASH = 81;
  /** RegularExpression Id. */
  int REM = 82;
  /** RegularExpression Id. */
  int INCR = 83;
  /** RegularExpression Id. */
  int DECR = 84;
  /** RegularExpression Id. */
  int RSHIFT = 85;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFT = 86;
  /** RegularExpression Id. */
  int LSHIFT = 87;
  /** RegularExpression Id. */
  int BIT_AND = 88;
  /** RegularExpression Id. */
  int BIT_OR = 89;
  /** RegularExpression Id. */
  int XOR = 90;
  /** RegularExpression Id. */
  int ASSIGN = 91;
  /** RegularExpression Id. */
  int PLUSASSIGN = 92;
  /** RegularExpression Id. */
  int MINUSASSIGN = 93;
  /** RegularExpression Id. */
  int STARASSIGN = 94;
  /** RegularExpression Id. */
  int SLASHASSIGN = 95;
  /** RegularExpression Id. */
  int ANDASSIGN = 96;
  /** RegularExpression Id. */
  int ORASSIGN = 97;
  /** RegularExpression Id. */
  int XORASSIGN = 98;
  /** RegularExpression Id. */
  int REMASSIGN = 99;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 100;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 101;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN = 102;
  /** RegularExpression Id. */
  int EQ = 103;
  /** RegularExpression Id. */
  int NE = 104;
  /** RegularExpression Id. */
  int LT = 105;
  /** RegularExpression Id. */
  int LE = 106;
  /** RegularExpression Id. */
  int GT = 107;
  /** RegularExpression Id. */
  int GE = 108;
  /** RegularExpression Id. */
  int BANG = 109;
  /** RegularExpression Id. */
  int SC_OR = 110;
  /** RegularExpression Id. */
  int SC_AND = 111;
  /** RegularExpression Id. */
  int TILDE = 112;
  /** RegularExpression Id. */
  int HOOK = 113;
  /** RegularExpression Id. */
  int COLON = 114;
  /** RegularExpression Id. */
  int ELLIPSIS = 115;
  /** RegularExpression Id. */
  int ESCAPE = 116;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<WHITESPACE>",
    "<NEWLINE>",
    "<SINGLE_LINE_COMMENT>",
    "\"/*\"",
    "<token of kind 5>",
    "<MULTI_LINE_COMMENT>",
    "<ZERO_INTEGER_LITERAL>",
    "<ZERO>",
    "\"0b\"",
    "<HEXADECIMAL_PREFIX>",
    "<POSITIVE_INTEGER_LITERAL>",
    "<POSITIVE_DECIMAL_LITERAL>",
    "<NONZERO_DECIMAL_DIGIT>",
    "<DECIMAL_DIGIT>",
    "<POSITIVE_BINARY_LITERAL>",
    "\"1\"",
    "<BINARY_DIGIT>",
    "<POSITIVE_HEXADECIMAL_LITERAL>",
    "<NONZERO_HEXADECIMAL_DIGIT>",
    "<HEXADECIMAL_DIGIT>",
    "<NEGATIVE_INTEGER_LITERAL>",
    "<RATIONAL_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<EXPONENT_PART>",
    "<CHARACTER_LITERAL>",
    "<ESCAPED_SEQUENCE>",
    "<ESCAPE_SEQUENCE>",
    "<DEFINED_ESCAPE>",
    "<HEXADECIMAL_LITERAL>",
    "<STRING_LITERAL>",
    "\"_\"",
    "\"assert\"",
    "\"break\"",
    "\"case\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"defined\"",
    "\"do\"",
    "\"else\"",
    "\"enum\"",
    "\"exit\"",
    "\"false\"",
    "\"for\"",
    "\"forward\"",
    "\"goto\"",
    "\"if\"",
    "\"native\"",
    "\"new\"",
    "\"operator\"",
    "\"public\"",
    "\"return\"",
    "\"sizeof\"",
    "\"sleep\"",
    "\"state\"",
    "\"static\"",
    "\"stock\"",
    "\"switch\"",
    "\"tagof\"",
    "\"true\"",
    "\"while\"",
    "<TAG>",
    "<ANY_TAG>",
    "\"bool\"",
    "<IDENTIFIER>",
    "<SYMBOL>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"++\"",
    "\"--\"",
    "\">>\"",
    "\">>>\"",
    "\"<<\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"=\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"!\"",
    "\"||\"",
    "\"&&\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"...\"",
    "\"\\\\\"",
  };

}
